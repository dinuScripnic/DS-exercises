# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import example_pb2 as example__pb2


class CustomerServiceStub(object):
    """
    Main service for customer administration

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddCustomer = channel.unary_unary(
                '/example.CustomerService/AddCustomer',
                request_serializer=example__pb2.Customer.SerializeToString,
                response_deserializer=example__pb2.CustomerServiceResponse.FromString,
                )
        self.SendPurchases = channel.stream_unary(
                '/example.CustomerService/SendPurchases',
                request_serializer=example__pb2.Purchase.SerializeToString,
                response_deserializer=example__pb2.CustomerServiceResponse.FromString,
                )
        self.RichCustomers = channel.unary_stream(
                '/example.CustomerService/RichCustomers',
                request_serializer=example__pb2.CustomerServiceResponse.SerializeToString,
                response_deserializer=example__pb2.Customer.FromString,
                )


class CustomerServiceServicer(object):
    """
    Main service for customer administration

    """

    def AddCustomer(self, request, context):
        """
        Adds a new customer

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendPurchases(self, request_iterator, context):
        """
        Adds a number of purchases for a customer

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RichCustomers(self, request, context):
        """
        recieve all the customers with purchase amount > 150

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CustomerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddCustomer': grpc.unary_unary_rpc_method_handler(
                    servicer.AddCustomer,
                    request_deserializer=example__pb2.Customer.FromString,
                    response_serializer=example__pb2.CustomerServiceResponse.SerializeToString,
            ),
            'SendPurchases': grpc.stream_unary_rpc_method_handler(
                    servicer.SendPurchases,
                    request_deserializer=example__pb2.Purchase.FromString,
                    response_serializer=example__pb2.CustomerServiceResponse.SerializeToString,
            ),
            'RichCustomers': grpc.unary_stream_rpc_method_handler(
                    servicer.RichCustomers,
                    request_deserializer=example__pb2.CustomerServiceResponse.FromString,
                    response_serializer=example__pb2.Customer.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'example.CustomerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CustomerService(object):
    """
    Main service for customer administration

    """

    @staticmethod
    def AddCustomer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/example.CustomerService/AddCustomer',
            example__pb2.Customer.SerializeToString,
            example__pb2.CustomerServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendPurchases(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/example.CustomerService/SendPurchases',
            example__pb2.Purchase.SerializeToString,
            example__pb2.CustomerServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RichCustomers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/example.CustomerService/RichCustomers',
            example__pb2.CustomerServiceResponse.SerializeToString,
            example__pb2.Customer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
